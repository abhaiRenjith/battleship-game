package upei.project;

import javax.swing.*;
import java.util.*;

public class Board {
    private char[][] grid; // Initializing a 2D of char which will be used as our game board.


    /* Method Board is used to initialize a blank board of dimension 10X10 and fills them with '_' denoting blank
    *  space, where ships can be placed.*/
    public Board() {
        this.grid = new char[10][10];
        for (char[] row : this.grid) {
            Arrays.fill(row, '_');
        }
    }
    /* This method is responsible for printing the board to the output console.*/
    public char[][] displayBoard() {
        for (char[] row : this.grid) {
            for (char cell : row) {
                System.out.print(cell + " ");
            }
            System.out.println();
        }
        return null;
    }
    /*The getCell method functions similarly to a getter and fetches us the cell from the grid
    * depending on the parameters passed.*/
    public char getCell(int row, int col) {
        return this.grid[row][col];
    }

    /*This method is used to place the ships on the grid. When the parameter is passed if the isHorizontal
    * is found to be false, then the ships will be placed vertically, else horizontally.If there exists a scenario
    * where the passed parameter is found to be out of bound then an error message related to invalid placement
    * will be printed out to teh console.*/
    public void placeShip(int row, int col, int size, boolean isHorizontal, String shipName) {
        if (isHorizontal && col + size <= 10) {
            for (int i = 0; i < size; i++) {
                this.grid[row][col + i] = 'O';
            }
        } else if (!isHorizontal && row + size <= 10) {
            for (int i = 0; i < size; i++) {
                this.grid[row + i][col] = 'O';
            }
        } else {
            System.out.println("Invalid placement. Ship goes out of bounds.");
        }
    }

    /*This method is used to prevent any overlay of ships, the passed in parameter is usually generated by the
    * computer and hence it is prone to error. This method checks the surrounding for 'O's, because in our game
    * 'O' is used to denote ships. If 'O's are found the method return true, trying to convey that the spot is
    * occupied and needs to be regenerated, this search can function both horizontally and vertically. */
    boolean spotTaken(int row, int col, int shipSize, boolean isHorizontal) {
        ArrayList<String> spotChecker = new ArrayList<>();
        if (isHorizontal) {
            // Check if the spot is within the grid bounds and if the cells are empty ('0')
            for (int j = col; j < col + shipSize; j++) {
                if (j >= this.grid[0].length || this.grid[row][j] == 'O') {
                    spotChecker.add("true");
                } else spotChecker.add("false");

            }
        } else {
            // Check if the spot is within the grid bounds and if the cells are empty ('0')
            for (int i = row; i < row + shipSize; i++) {
                if (i >= this.grid.length || this.grid[i][col] == 'O') {
                    spotChecker.add("true");
                } else spotChecker.add("false");
                }
            }for (String s : spotChecker) {
            if (Objects.equals(s, "true"))
                return true;
        }

        // If all spots are free, return false
        return false;
    }

    /*This method traverses through the entirety of the grid and checks if all the ships are sunk, if any ships are found to be
    * not fully sunk, it returns a false, else if no ships remains returns true. */
    public boolean allShipsSunk() {
        for (int row = 0; row < 10; row++) {
            for (int col = 0; col < 10; col++) {
                if (grid[row][col] == 'O') {
                    return false; // If any ship is found, not all ships are sunk
                }
            }
        }
        return true; // No 'O' found, all ships are sunk
    }

    /*This method takes in 3 parameters row, col and a value. The method goes to the provided grid with the help of coordinates and
    * sets the value provided.*/
    public void setCell(int row, int col, char value) {
        this.grid[row][col] = value;
    }

    /*This is a getter to return the players grid or game board.*/
    public char[][] getGrid(){
        return this.grid;
    }
    /*Sets the game board grid with the provided 2D char array.*/
    public void setGrid(char[][] newGrid) {
        if (newGrid.length != 10 || newGrid[0].length != 10) {
            throw new IllegalArgumentException("Invalid grid dimensions. The grid must be 10x10.");
        }
        this.grid = newGrid;
    }
}




